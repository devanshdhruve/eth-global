/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "AnnotationMarketplaceHTS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnnotationMarketplaceHTS__factory>;
    getContractFactory(
      name: "ReputationSystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReputationSystem__factory>;
    getContractFactory(
      name: "HederaTokenWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HederaTokenWrapper__factory>;
    getContractFactory(
      name: "IReputationSystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReputationSystem__factory>;
    getContractFactory(
      name: "MockHTSToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockHTSToken__factory>;
    getContractFactory(
      name: "MockReputation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockReputation__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "AnnotationMarketplaceHTS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AnnotationMarketplaceHTS>;
    getContractAt(
      name: "ReputationSystem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReputationSystem>;
    getContractAt(
      name: "HederaTokenWrapper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HederaTokenWrapper>;
    getContractAt(
      name: "IReputationSystem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReputationSystem>;
    getContractAt(
      name: "MockHTSToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockHTSToken>;
    getContractAt(
      name: "MockReputation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockReputation>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AnnotationMarketplaceHTS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AnnotationMarketplaceHTS>;
    deployContract(
      name: "ReputationSystem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReputationSystem>;
    deployContract(
      name: "HederaTokenWrapper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HederaTokenWrapper>;
    deployContract(
      name: "IReputationSystem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReputationSystem>;
    deployContract(
      name: "MockHTSToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockHTSToken>;
    deployContract(
      name: "MockReputation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockReputation>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AnnotationMarketplaceHTS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AnnotationMarketplaceHTS>;
    deployContract(
      name: "ReputationSystem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReputationSystem>;
    deployContract(
      name: "HederaTokenWrapper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HederaTokenWrapper>;
    deployContract(
      name: "IReputationSystem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReputationSystem>;
    deployContract(
      name: "MockHTSToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockHTSToken>;
    deployContract(
      name: "MockReputation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockReputation>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
