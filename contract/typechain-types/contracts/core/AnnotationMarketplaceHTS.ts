/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AnnotationMarketplaceHTSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APPROVALS_NEEDED"
      | "approveAnnotation"
      | "asiTokenAddress"
      | "clientProjects"
      | "createProject"
      | "depositFunds"
      | "emergencyRefund"
      | "getClientProjects"
      | "getProjectAvailableFunds"
      | "getProjectDetails"
      | "owner"
      | "projectAnnotators"
      | "projectCounter"
      | "projects"
      | "renounceOwnership"
      | "reputationSystem"
      | "submissions"
      | "submitAnnotation"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnnotationApproved"
      | "AnnotationSubmitted"
      | "EmergencyRefund"
      | "FundsReleased"
      | "HTSError"
      | "HTSTransfer"
      | "OwnershipTransferred"
      | "ProjectCancelled"
      | "ProjectCreated"
      | "ProjectFunded"
      | "ProjectStateChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "APPROVALS_NEEDED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveAnnotation",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "asiTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clientProjects",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientProjects",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectAvailableFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectAnnotators",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnnotation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVALS_NEEDED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveAnnotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asiTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clientProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectAvailableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectAnnotators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAnnotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AnnotationApprovedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    annotator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    annotator: string,
    amount: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    annotator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AnnotationSubmittedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    annotator: AddressLike,
    submissionURI: string
  ];
  export type OutputTuple = [
    projectId: bigint,
    annotator: string,
    submissionURI: string
  ];
  export interface OutputObject {
    projectId: bigint;
    annotator: string;
    submissionURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyRefundEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    client: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, client: string, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    client: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    annotator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    annotator: string,
    amount: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    annotator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTSErrorEvent {
  export type InputTuple = [responseCode: BigNumberish];
  export type OutputTuple = [responseCode: bigint];
  export interface OutputObject {
    responseCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTSTransferEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCancelledEvent {
  export type InputTuple = [projectId: BigNumberish, client: AddressLike];
  export type OutputTuple = [projectId: bigint, client: string];
  export interface OutputObject {
    projectId: bigint;
    client: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    client: AddressLike,
    datasetURI: string,
    tasksTotal: BigNumberish,
    taskReward: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    client: string,
    datasetURI: string,
    tasksTotal: bigint,
    taskReward: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    client: string;
    datasetURI: string;
    tasksTotal: bigint;
    taskReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectFundedEvent {
  export type InputTuple = [projectId: BigNumberish, totalFunds: BigNumberish];
  export type OutputTuple = [projectId: bigint, totalFunds: bigint];
  export interface OutputObject {
    projectId: bigint;
    totalFunds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectStateChangedEvent {
  export type InputTuple = [projectId: BigNumberish, newState: BigNumberish];
  export type OutputTuple = [projectId: bigint, newState: bigint];
  export interface OutputObject {
    projectId: bigint;
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnnotationMarketplaceHTS extends BaseContract {
  connect(runner?: ContractRunner | null): AnnotationMarketplaceHTS;
  waitForDeployment(): Promise<this>;

  interface: AnnotationMarketplaceHTSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APPROVALS_NEEDED: TypedContractMethod<[], [bigint], "view">;

  approveAnnotation: TypedContractMethod<
    [projectId: BigNumberish, annotator: AddressLike],
    [void],
    "nonpayable"
  >;

  asiTokenAddress: TypedContractMethod<[], [string], "view">;

  clientProjects: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  createProject: TypedContractMethod<
    [
      datasetURI: string,
      tasksTotal: BigNumberish,
      taskReward: BigNumberish,
      deadline: BigNumberish,
      minReputation: BigNumberish,
      reputationReward: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  depositFunds: TypedContractMethod<
    [projectId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyRefund: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getClientProjects: TypedContractMethod<
    [client: AddressLike],
    [bigint[]],
    "view"
  >;

  getProjectAvailableFunds: TypedContractMethod<
    [projectId: BigNumberish],
    [bigint],
    "view"
  >;

  getProjectDetails: TypedContractMethod<
    [projectId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        client: string;
        datasetURI: string;
        taskReward: bigint;
        tasksCompleted: bigint;
        tasksTotal: bigint;
        state: bigint;
        totalFunds: bigint;
        releasedFunds: bigint;
        availableFunds: bigint;
        createdAt: bigint;
        deadline: bigint;
        minReputation: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  projectAnnotators: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  projectCounter: TypedContractMethod<[], [bigint], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        client: string;
        datasetURI: string;
        taskReward: bigint;
        tasksCompleted: bigint;
        tasksTotal: bigint;
        state: bigint;
        totalFunds: bigint;
        releasedFunds: bigint;
        createdAt: bigint;
        deadline: bigint;
        minReputation: bigint;
        reputationReward: bigint;
        fundsLocked: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationSystem: TypedContractMethod<[], [string], "view">;

  submissions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        uri: string;
        submittedAt: bigint;
        status: bigint;
        approvalCount: bigint;
      }
    ],
    "view"
  >;

  submitAnnotation: TypedContractMethod<
    [projectId: BigNumberish, submissionURI: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APPROVALS_NEEDED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveAnnotation"
  ): TypedContractMethod<
    [projectId: BigNumberish, annotator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asiTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clientProjects"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      datasetURI: string,
      tasksTotal: BigNumberish,
      taskReward: BigNumberish,
      deadline: BigNumberish,
      minReputation: BigNumberish,
      reputationReward: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<
    [projectId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyRefund"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getClientProjects"
  ): TypedContractMethod<[client: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getProjectAvailableFunds"
  ): TypedContractMethod<[projectId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProjectDetails"
  ): TypedContractMethod<
    [projectId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        client: string;
        datasetURI: string;
        taskReward: bigint;
        tasksCompleted: bigint;
        tasksTotal: bigint;
        state: bigint;
        totalFunds: bigint;
        releasedFunds: bigint;
        availableFunds: bigint;
        createdAt: bigint;
        deadline: bigint;
        minReputation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectAnnotators"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "projectCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        client: string;
        datasetURI: string;
        taskReward: bigint;
        tasksCompleted: bigint;
        tasksTotal: bigint;
        state: bigint;
        totalFunds: bigint;
        releasedFunds: bigint;
        createdAt: bigint;
        deadline: bigint;
        minReputation: bigint;
        reputationReward: bigint;
        fundsLocked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationSystem"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        uri: string;
        submittedAt: bigint;
        status: bigint;
        approvalCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitAnnotation"
  ): TypedContractMethod<
    [projectId: BigNumberish, submissionURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AnnotationApproved"
  ): TypedContractEvent<
    AnnotationApprovedEvent.InputTuple,
    AnnotationApprovedEvent.OutputTuple,
    AnnotationApprovedEvent.OutputObject
  >;
  getEvent(
    key: "AnnotationSubmitted"
  ): TypedContractEvent<
    AnnotationSubmittedEvent.InputTuple,
    AnnotationSubmittedEvent.OutputTuple,
    AnnotationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyRefund"
  ): TypedContractEvent<
    EmergencyRefundEvent.InputTuple,
    EmergencyRefundEvent.OutputTuple,
    EmergencyRefundEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "HTSError"
  ): TypedContractEvent<
    HTSErrorEvent.InputTuple,
    HTSErrorEvent.OutputTuple,
    HTSErrorEvent.OutputObject
  >;
  getEvent(
    key: "HTSTransfer"
  ): TypedContractEvent<
    HTSTransferEvent.InputTuple,
    HTSTransferEvent.OutputTuple,
    HTSTransferEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCancelled"
  ): TypedContractEvent<
    ProjectCancelledEvent.InputTuple,
    ProjectCancelledEvent.OutputTuple,
    ProjectCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectFunded"
  ): TypedContractEvent<
    ProjectFundedEvent.InputTuple,
    ProjectFundedEvent.OutputTuple,
    ProjectFundedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectStateChanged"
  ): TypedContractEvent<
    ProjectStateChangedEvent.InputTuple,
    ProjectStateChangedEvent.OutputTuple,
    ProjectStateChangedEvent.OutputObject
  >;

  filters: {
    "AnnotationApproved(uint256,address,uint256)": TypedContractEvent<
      AnnotationApprovedEvent.InputTuple,
      AnnotationApprovedEvent.OutputTuple,
      AnnotationApprovedEvent.OutputObject
    >;
    AnnotationApproved: TypedContractEvent<
      AnnotationApprovedEvent.InputTuple,
      AnnotationApprovedEvent.OutputTuple,
      AnnotationApprovedEvent.OutputObject
    >;

    "AnnotationSubmitted(uint256,address,string)": TypedContractEvent<
      AnnotationSubmittedEvent.InputTuple,
      AnnotationSubmittedEvent.OutputTuple,
      AnnotationSubmittedEvent.OutputObject
    >;
    AnnotationSubmitted: TypedContractEvent<
      AnnotationSubmittedEvent.InputTuple,
      AnnotationSubmittedEvent.OutputTuple,
      AnnotationSubmittedEvent.OutputObject
    >;

    "EmergencyRefund(uint256,address,uint256)": TypedContractEvent<
      EmergencyRefundEvent.InputTuple,
      EmergencyRefundEvent.OutputTuple,
      EmergencyRefundEvent.OutputObject
    >;
    EmergencyRefund: TypedContractEvent<
      EmergencyRefundEvent.InputTuple,
      EmergencyRefundEvent.OutputTuple,
      EmergencyRefundEvent.OutputObject
    >;

    "FundsReleased(uint256,address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "HTSError(int32)": TypedContractEvent<
      HTSErrorEvent.InputTuple,
      HTSErrorEvent.OutputTuple,
      HTSErrorEvent.OutputObject
    >;
    HTSError: TypedContractEvent<
      HTSErrorEvent.InputTuple,
      HTSErrorEvent.OutputTuple,
      HTSErrorEvent.OutputObject
    >;

    "HTSTransfer(address,address,address,int64)": TypedContractEvent<
      HTSTransferEvent.InputTuple,
      HTSTransferEvent.OutputTuple,
      HTSTransferEvent.OutputObject
    >;
    HTSTransfer: TypedContractEvent<
      HTSTransferEvent.InputTuple,
      HTSTransferEvent.OutputTuple,
      HTSTransferEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectCancelled(uint256,address)": TypedContractEvent<
      ProjectCancelledEvent.InputTuple,
      ProjectCancelledEvent.OutputTuple,
      ProjectCancelledEvent.OutputObject
    >;
    ProjectCancelled: TypedContractEvent<
      ProjectCancelledEvent.InputTuple,
      ProjectCancelledEvent.OutputTuple,
      ProjectCancelledEvent.OutputObject
    >;

    "ProjectCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectFunded(uint256,uint256)": TypedContractEvent<
      ProjectFundedEvent.InputTuple,
      ProjectFundedEvent.OutputTuple,
      ProjectFundedEvent.OutputObject
    >;
    ProjectFunded: TypedContractEvent<
      ProjectFundedEvent.InputTuple,
      ProjectFundedEvent.OutputTuple,
      ProjectFundedEvent.OutputObject
    >;

    "ProjectStateChanged(uint256,uint8)": TypedContractEvent<
      ProjectStateChangedEvent.InputTuple,
      ProjectStateChangedEvent.OutputTuple,
      ProjectStateChangedEvent.OutputObject
    >;
    ProjectStateChanged: TypedContractEvent<
      ProjectStateChangedEvent.InputTuple,
      ProjectStateChangedEvent.OutputTuple,
      ProjectStateChangedEvent.OutputObject
    >;
  };
}
