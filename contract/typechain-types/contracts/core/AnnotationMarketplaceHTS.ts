/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AnnotationMarketplaceHTSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "annotatorSubmitted"
      | "completeProject"
      | "createProject"
      | "getAnnotatorProgress"
      | "getProject"
      | "getReviewerProgress"
      | "nextProjectId"
      | "owner"
      | "projects"
      | "renounceOwnership"
      | "reviewerReviewed"
      | "submitAnnotation"
      | "submitReview"
      | "token"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnnotationSubmitted"
      | "OwnershipTransferred"
      | "ProjectCompleted"
      | "ProjectCreated"
      | "ReviewSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "annotatorSubmitted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnnotatorProgress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviewerProgress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextProjectId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewerReviewed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnnotation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReview",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "annotatorSubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnnotatorProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReviewerProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewerReviewed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAnnotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AnnotationSubmittedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    annotator: AddressLike,
    taskCount: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    annotator: string,
    taskCount: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    annotator: string;
    taskCount: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCompletedEvent {
  export type InputTuple = [projectId: BigNumberish, refunded: BigNumberish];
  export type OutputTuple = [projectId: bigint, refunded: bigint];
  export interface OutputObject {
    projectId: bigint;
    refunded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    client: AddressLike,
    totalTasks: BigNumberish,
    rewardPerTask: BigNumberish,
    annotatorShare: BigNumberish,
    reviewerShare: BigNumberish,
    deposit: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    client: string,
    totalTasks: bigint,
    rewardPerTask: bigint,
    annotatorShare: bigint,
    reviewerShare: bigint,
    deposit: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    client: string;
    totalTasks: bigint;
    rewardPerTask: bigint;
    annotatorShare: bigint;
    reviewerShare: bigint;
    deposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewSubmittedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    reviewer: AddressLike,
    taskCount: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    reviewer: string,
    taskCount: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    reviewer: string;
    taskCount: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnnotationMarketplaceHTS extends BaseContract {
  connect(runner?: ContractRunner | null): AnnotationMarketplaceHTS;
  waitForDeployment(): Promise<this>;

  interface: AnnotationMarketplaceHTSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  annotatorSubmitted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  completeProject: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProject: TypedContractMethod<
    [
      totalTasks: BigNumberish,
      rewardPerTask: BigNumberish,
      annotatorShare: BigNumberish,
      reviewerShare: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getAnnotatorProgress: TypedContractMethod<
    [projectId: BigNumberish, annotator: AddressLike],
    [bigint],
    "view"
  >;

  getProject: TypedContractMethod<
    [projectId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        client: string;
        totalTasks: bigint;
        rewardPerTask: bigint;
        annotatorShare: bigint;
        reviewerShare: bigint;
        escrowed: bigint;
        paidOut: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;

  getReviewerProgress: TypedContractMethod<
    [projectId: BigNumberish, reviewer: AddressLike],
    [bigint],
    "view"
  >;

  nextProjectId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        client: string;
        totalTasks: bigint;
        rewardPerTask: bigint;
        annotatorShare: bigint;
        reviewerShare: bigint;
        escrowed: bigint;
        paidOut: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reviewerReviewed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  submitAnnotation: TypedContractMethod<
    [projectId: BigNumberish, taskCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitReview: TypedContractMethod<
    [projectId: BigNumberish, taskCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "annotatorSubmitted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeProject"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      totalTasks: BigNumberish,
      rewardPerTask: BigNumberish,
      annotatorShare: BigNumberish,
      reviewerShare: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAnnotatorProgress"
  ): TypedContractMethod<
    [projectId: BigNumberish, annotator: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProject"
  ): TypedContractMethod<
    [projectId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        client: string;
        totalTasks: bigint;
        rewardPerTask: bigint;
        annotatorShare: bigint;
        reviewerShare: bigint;
        escrowed: bigint;
        paidOut: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReviewerProgress"
  ): TypedContractMethod<
    [projectId: BigNumberish, reviewer: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextProjectId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        client: string;
        totalTasks: bigint;
        rewardPerTask: bigint;
        annotatorShare: bigint;
        reviewerShare: bigint;
        escrowed: bigint;
        paidOut: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewerReviewed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitAnnotation"
  ): TypedContractMethod<
    [projectId: BigNumberish, taskCount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitReview"
  ): TypedContractMethod<
    [projectId: BigNumberish, taskCount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AnnotationSubmitted"
  ): TypedContractEvent<
    AnnotationSubmittedEvent.InputTuple,
    AnnotationSubmittedEvent.OutputTuple,
    AnnotationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCompleted"
  ): TypedContractEvent<
    ProjectCompletedEvent.InputTuple,
    ProjectCompletedEvent.OutputTuple,
    ProjectCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewSubmitted"
  ): TypedContractEvent<
    ReviewSubmittedEvent.InputTuple,
    ReviewSubmittedEvent.OutputTuple,
    ReviewSubmittedEvent.OutputObject
  >;

  filters: {
    "AnnotationSubmitted(uint256,address,uint256,uint256)": TypedContractEvent<
      AnnotationSubmittedEvent.InputTuple,
      AnnotationSubmittedEvent.OutputTuple,
      AnnotationSubmittedEvent.OutputObject
    >;
    AnnotationSubmitted: TypedContractEvent<
      AnnotationSubmittedEvent.InputTuple,
      AnnotationSubmittedEvent.OutputTuple,
      AnnotationSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectCompleted(uint256,uint256)": TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;
    ProjectCompleted: TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;

    "ProjectCreated(uint256,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ReviewSubmitted(uint256,address,uint256,uint256)": TypedContractEvent<
      ReviewSubmittedEvent.InputTuple,
      ReviewSubmittedEvent.OutputTuple,
      ReviewSubmittedEvent.OutputObject
    >;
    ReviewSubmitted: TypedContractEvent<
      ReviewSubmittedEvent.InputTuple,
      ReviewSubmittedEvent.OutputTuple,
      ReviewSubmittedEvent.OutputObject
    >;
  };
}
