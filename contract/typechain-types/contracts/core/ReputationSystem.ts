/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ReputationSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agent"
      | "awardReputation"
      | "domainScores"
      | "getDomainScore"
      | "getReputation"
      | "getSuccessRate"
      | "marketplace"
      | "meetsMinimum"
      | "owner"
      | "profiles"
      | "recordTaskApproved"
      | "recordTaskRejected"
      | "renounceOwnership"
      | "setAgent"
      | "setMarketplace"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ReputationUpdated"
      | "TaskCompleted"
      | "TaskRejected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "agent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "awardReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainScores",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainScore",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuccessRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "meetsMinimum",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordTaskApproved",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordTaskRejected",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplace",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "agent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "awardReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuccessRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "meetsMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordTaskApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordTaskRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [user: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [user: string, newScore: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCompletedEvent {
  export type InputTuple = [user: AddressLike, domain: string];
  export type OutputTuple = [user: string, domain: string];
  export interface OutputObject {
    user: string;
    domain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskRejectedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationSystem extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationSystem;
  waitForDeployment(): Promise<this>;

  interface: ReputationSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agent: TypedContractMethod<[], [string], "view">;

  awardReputation: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  domainScores: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [bigint],
    "view"
  >;

  getDomainScore: TypedContractMethod<
    [user: AddressLike, domain: string],
    [bigint],
    "view"
  >;

  getReputation: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getSuccessRate: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  marketplace: TypedContractMethod<[], [string], "view">;

  meetsMinimum: TypedContractMethod<
    [user: AddressLike, minimum: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  profiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        reputationScore: bigint;
        tasksCompleted: bigint;
        tasksRejected: bigint;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;

  recordTaskApproved: TypedContractMethod<
    [user: AddressLike, domain: string],
    [void],
    "nonpayable"
  >;

  recordTaskRejected: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAgent: TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;

  setMarketplace: TypedContractMethod<
    [_marketplace: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "awardReputation"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainScores"
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDomainScore"
  ): TypedContractMethod<[user: AddressLike, domain: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSuccessRate"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketplace"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "meetsMinimum"
  ): TypedContractMethod<
    [user: AddressLike, minimum: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "profiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        reputationScore: bigint;
        tasksCompleted: bigint;
        tasksRejected: bigint;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordTaskApproved"
  ): TypedContractMethod<
    [user: AddressLike, domain: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordTaskRejected"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAgent"
  ): TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketplace"
  ): TypedContractMethod<[_marketplace: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TaskCompleted"
  ): TypedContractEvent<
    TaskCompletedEvent.InputTuple,
    TaskCompletedEvent.OutputTuple,
    TaskCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TaskRejected"
  ): TypedContractEvent<
    TaskRejectedEvent.InputTuple,
    TaskRejectedEvent.OutputTuple,
    TaskRejectedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "TaskCompleted(address,string)": TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;
    TaskCompleted: TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;

    "TaskRejected(address)": TypedContractEvent<
      TaskRejectedEvent.InputTuple,
      TaskRejectedEvent.OutputTuple,
      TaskRejectedEvent.OutputObject
    >;
    TaskRejected: TypedContractEvent<
      TaskRejectedEvent.InputTuple,
      TaskRejectedEvent.OutputTuple,
      TaskRejectedEvent.OutputObject
    >;
  };
}
