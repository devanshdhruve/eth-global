/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ReputationSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "anchorFeedback"
      | "batchUpdateReputation"
      | "domainScores"
      | "getDomainScore"
      | "getReputation"
      | "meetsMinimum"
      | "owner"
      | "renounceOwnership"
      | "reputationAgent"
      | "reputationScores"
      | "setReputation"
      | "setReputationAgent"
      | "transferOwnership"
      | "updateReputation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchReputationUpdate"
      | "FeedbackAnchored"
      | "OwnershipTransferred"
      | "ReputationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "anchorFeedback",
    values: [AddressLike, AddressLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateReputation",
    values: [AddressLike[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainScores",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainScore",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "meetsMinimum",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationAgent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationScores",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReputationAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "anchorFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "meetsMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReputationAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
}

export namespace BatchReputationUpdateEvent {
  export type InputTuple = [
    annotators: AddressLike[],
    scores: BigNumberish[],
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [
    annotators: string[],
    scores: bigint[],
    merkleRoot: string
  ];
  export interface OutputObject {
    annotators: string[];
    scores: bigint[];
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedbackAnchoredEvent {
  export type InputTuple = [
    annotator: AddressLike,
    reviewer: AddressLike,
    score: BigNumberish,
    hcsTopicId: string,
    feedbackHash: BytesLike
  ];
  export type OutputTuple = [
    annotator: string,
    reviewer: string,
    score: bigint,
    hcsTopicId: string,
    feedbackHash: string
  ];
  export interface OutputObject {
    annotator: string;
    reviewer: string;
    score: bigint;
    hcsTopicId: string;
    feedbackHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    annotator: AddressLike,
    newScore: BigNumberish,
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [
    annotator: string,
    newScore: bigint,
    merkleRoot: string
  ];
  export interface OutputObject {
    annotator: string;
    newScore: bigint;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationSystem extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationSystem;
  waitForDeployment(): Promise<this>;

  interface: ReputationSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  anchorFeedback: TypedContractMethod<
    [
      annotator: AddressLike,
      reviewer: AddressLike,
      score: BigNumberish,
      hcsTopicId: string,
      feedbackHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  batchUpdateReputation: TypedContractMethod<
    [annotators: AddressLike[], scores: BigNumberish[], merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  domainScores: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [bigint],
    "view"
  >;

  getDomainScore: TypedContractMethod<
    [annotator: AddressLike, domain: string],
    [bigint],
    "view"
  >;

  getReputation: TypedContractMethod<
    [annotator: AddressLike],
    [bigint],
    "view"
  >;

  meetsMinimum: TypedContractMethod<
    [annotator: AddressLike, minimum: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationAgent: TypedContractMethod<[], [string], "view">;

  reputationScores: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setReputation: TypedContractMethod<
    [annotator: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReputationAgent: TypedContractMethod<
    [_agent: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReputation: TypedContractMethod<
    [annotator: AddressLike, newScore: BigNumberish, merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "anchorFeedback"
  ): TypedContractMethod<
    [
      annotator: AddressLike,
      reviewer: AddressLike,
      score: BigNumberish,
      hcsTopicId: string,
      feedbackHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchUpdateReputation"
  ): TypedContractMethod<
    [annotators: AddressLike[], scores: BigNumberish[], merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainScores"
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDomainScore"
  ): TypedContractMethod<
    [annotator: AddressLike, domain: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<[annotator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "meetsMinimum"
  ): TypedContractMethod<
    [annotator: AddressLike, minimum: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationAgent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reputationScores"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setReputation"
  ): TypedContractMethod<
    [annotator: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReputationAgent"
  ): TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [annotator: AddressLike, newScore: BigNumberish, merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchReputationUpdate"
  ): TypedContractEvent<
    BatchReputationUpdateEvent.InputTuple,
    BatchReputationUpdateEvent.OutputTuple,
    BatchReputationUpdateEvent.OutputObject
  >;
  getEvent(
    key: "FeedbackAnchored"
  ): TypedContractEvent<
    FeedbackAnchoredEvent.InputTuple,
    FeedbackAnchoredEvent.OutputTuple,
    FeedbackAnchoredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;

  filters: {
    "BatchReputationUpdate(address[],uint256[],bytes32)": TypedContractEvent<
      BatchReputationUpdateEvent.InputTuple,
      BatchReputationUpdateEvent.OutputTuple,
      BatchReputationUpdateEvent.OutputObject
    >;
    BatchReputationUpdate: TypedContractEvent<
      BatchReputationUpdateEvent.InputTuple,
      BatchReputationUpdateEvent.OutputTuple,
      BatchReputationUpdateEvent.OutputObject
    >;

    "FeedbackAnchored(address,address,uint256,string,bytes32)": TypedContractEvent<
      FeedbackAnchoredEvent.InputTuple,
      FeedbackAnchoredEvent.OutputTuple,
      FeedbackAnchoredEvent.OutputObject
    >;
    FeedbackAnchored: TypedContractEvent<
      FeedbackAnchoredEvent.InputTuple,
      FeedbackAnchoredEvent.OutputTuple,
      FeedbackAnchoredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,bytes32)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
  };
}
